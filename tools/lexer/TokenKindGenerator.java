package tools.lexer;

import java.io.FileWriter;
import java.io.IOException;
import java.nio.file.Path;
import java.util.List;

import config.LexerConfiguration;
import tools.FileGeneratorTool;
import static tools.ToolHelpers.*;

public class TokenKindGenerator extends FileGeneratorTool {
    private int tokenCount;

    private String sourceCodePrefix = String.join("", List.of(
            String.format("package %s.%s;", LexerConfiguration.LEXER_PACKAGE,
                    LexerConfiguration.DAO_PACKAGE),
            getNewLines(2),
            getAutoGeneratedWarning(),
            getNewLines(1),
            String.format("public enum %s {", LexerConfiguration.TOKEN_KIND_CLASS_NAME),
            endAndIndent(1, 1),
            getComment("Special TokenKind for internal use"),
            endAndIndent(1, 1),
            "BogusToken,",
            endAndIndent(1, 1),
            getComment("Generated TokenKinds"),
            endAndIndent(1, 1)));

    private String sourceCodeSuffix = String.join("", List.of(
            endAndIndent(1, 1),
            getComment("Special TokenKind for internal use"),
            endAndIndent(1, 1),
            "EOF",
            getNewLines(1),
            "}",
            getNewLines(1)));

    public TokenKindGenerator(Path filePath) {
        super(filePath);
    }

    @Override
    public void regenerateSourceFile() {
        try (FileWriter writer = new FileWriter(LexerConfiguration.TOKEN_KIND_FILE_PATH.toFile())) {
            writer.write(sourceCodePrefix);
            this.tokenCount = 1;

            while (this.hasNext()) {
                writer.write(String.format("%s, ", this.nextTokenKind()));

                if (this.tokenCount++ % 5 == 0) {
                    writer.write(getNewLines(1));
                    writer.write(getIndentation(1));
                }
            }

            writer.write(sourceCodeSuffix);
        } catch (IOException exception) {
            failExecution(exception);
        }
    }

    private String nextTokenKind() {
        String line = this.next();

        return line.split("\\s+")[0];
    }
}
