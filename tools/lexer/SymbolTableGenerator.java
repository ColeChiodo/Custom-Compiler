package tools.lexer;

import java.io.FileWriter;
import java.io.IOException;
import java.nio.file.Path;
import java.util.List;

import config.LexerConfiguration;
import tools.FileGeneratorTool;

import static tools.ToolHelpers.*;

public class SymbolTableGenerator extends FileGeneratorTool {

    private String sourceCodePrefix = String.join("", List.of(
            String.format("package %s;", LexerConfiguration.LEXER_PACKAGE),
            getNewLines(2),
            "import java.util.Map;",
            getNewLines(1),
            "import java.util.HashMap;",
            getNewLines(1),
            "import lexer.daos.TokenKind;",
            getNewLines(1),
            "import lexer.daos.Symbol;",
            getNewLines(2),
            getAutoGeneratedWarning(),
            getNewLines(1),
            String.format("public class %s {", LexerConfiguration.UNIQUE_SYMBOL_MAP_CLASS_NAME),
            endAndIndent(1, 1),
            "private static Map<String, Symbol> symbols;",
            endAndIndent(2, 1),
            "static {",
            endAndIndent(1, 2),
            "symbols = new HashMap<>();",
            getNewLines(2)));

    private String sourceCodeSuffix = String.join("", List.of(
            getIndentation(1),
            "}",
            endAndIndent(2, 1),
            "public static Symbol recordSymbol(String lexeme, TokenKind kind) {",
            endAndIndent(1, 2),
            "Symbol s = symbols.get(lexeme);",
            endAndIndent(2, 2),
            "if (s == null) {",
            endAndIndent(1, 3),
            "if (kind == TokenKind.BogusToken) {",
            endAndIndent(1, 4),
            getComment("bogus string so don't enter into symbols"),
            endAndIndent(1, 4),
            "return null;",
            endAndIndent(1, 3),
            "}",
            endAndIndent(2, 3),
            "s = new Symbol(lexeme, kind);",
            endAndIndent(1, 3),
            "symbols.put(lexeme, s);",
            endAndIndent(1, 2),
            "}",
            endAndIndent(2, 2),
            "return s;",
            endAndIndent(1, 1),
            "}",
            getNewLines(1),
            "}",
            getNewLines(1)));

    @Override
    public void regenerateSourceFile() {
        try (FileWriter writer =
                new FileWriter(LexerConfiguration.UNIQUE_SYMBOL_MAP_FILE_PATH.toFile())) {
            writer.write(sourceCodePrefix);

            while (this.hasNext()) {
                writer.write(this.getInsertKeywordSymbolLine());
            }

            writer.write(sourceCodeSuffix);
        } catch (IOException exception) {
            failExecution(exception);
        }
    }

    public SymbolTableGenerator(Path filePath) {
        super(filePath);
    }

    private String getInsertKeywordSymbolLine() {
        StringBuffer buffer = new StringBuffer();

        String[] entries = this.next().split("\\s+");

        buffer.append(getIndentation(2));
        buffer.append(
                String.format("symbols.put(\"%s\", new Symbol(\"%s\", TokenKind.%s));", entries[1],
                        entries[1], entries[0]));
        buffer.append(getNewLines(1));

        return buffer.toString();
    }

}
