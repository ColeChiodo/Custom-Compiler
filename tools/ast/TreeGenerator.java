package tools.ast;

import tools.FileGeneratorTool;
import static tools.ToolHelpers.*;

import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.nio.file.Path;
import java.nio.file.Paths;

import config.ParserConfiguration;

public class TreeGenerator extends FileGeneratorTool {
    public TreeGenerator(Path filePath) {
        super(filePath);
    }

    private static final int CLASS_NAME_INDEX = 0;
    private static final int OPTIONAL_ARGS_INDEX = 1;

    private String sourceCodePrefix = String.join(
            "",
            String.format("package %s.%s;", ParserConfiguration.AST_PACKAGE,
                    ParserConfiguration.TREE_PACKAGE),
            getNewLines(2),
            "import ast.AST;",
            getNewLines(1),
            "import visitor.TreeVisitor;",
            getNewLines(2));

    @Override
    public void regenerateSourceFile() {
        File treeDirectory = new File(
                ParserConfiguration.TREE_DIRECTORY.toAbsolutePath().toString());

        File[] oldTrees = treeDirectory.listFiles();
        for (File file : oldTrees) {
            file.delete();
        }

        while (this.hasNext()) {
            String[] spec = this.next().split("\\s+");

            String className = spec[CLASS_NAME_INDEX] + "Tree";
            boolean implementsSymbolTree = false;

            if (spec.length == 2) {
                implementsSymbolTree = spec[OPTIONAL_ARGS_INDEX].contains("s");
            }

            try (FileWriter writer = new FileWriter(Paths.get(
                    ParserConfiguration.AST_PACKAGE,
                    ParserConfiguration.TREE_PACKAGE,
                    String.format("%s.java", className)).toFile())) {

                writer.write(sourceCodePrefix);

                if (implementsSymbolTree) {
                    writer.write("import ast.ISymbolTree;");
                    writer.write(getNewLines(1));
                    writer.write("import lexer.SymbolTable;");
                    writer.write(getNewLines(1));
                    writer.write("import lexer.daos.*;");
                    writer.write(getNewLines(2));
                }

                writer.write(getAutoGeneratedWarning());
                writer.write(getNewLines(1));

                writer.write(String.format("public class %s extends AST ", className));
                if (implementsSymbolTree) {
                    writer.write("implements ISymbolTree ");
                }
                writer.write("{");
                writer.write(getNewLines(1));

                if (implementsSymbolTree) {
                    writer.write(String.join(
                            "",
                            getIndentation(1),
                            "private Symbol symbol;",
                            getNewLines(2)));
                }

                writer.write(String.join(
                        "",
                        getIndentation(1),
                        "@Override",
                        getNewLines(1),
                        getIndentation(1),
                        "public Object accept(TreeVisitor visitor) {",
                        endAndIndent(1, 2),
                        "return visitor.visit(this);",
                        getNewLines(1),
                        getIndentation(1),
                        "}"));

                if (implementsSymbolTree) {
                    writer.write(String.join("",
                            getNewLines(2),
                            getIndentation(1),
                            String.format("public %s(Token token) {", className),
                            getNewLines(1),
                            getIndentation(2),
                            "this.symbol = SymbolTable.recordSymbol(token.getLexeme(), TokenKind.BogusToken);",
                            getNewLines(1),
                            getIndentation(1),
                            "}",
                            getNewLines(2),
                            getIndentation(1),
                            "public Symbol getSymbol() {",
                            getNewLines(1),
                            getIndentation(2),
                            "return this.symbol;",
                            getNewLines(1),
                            getIndentation(1),
                            "}"));
                }

                writer.write(getNewLines(1));
                writer.write("}");
            } catch (IOException exception) {
                failExecution(exception);
            }

        }
    }

}
